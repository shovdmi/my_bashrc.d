#for clbg in {40..47} {100..107} 49 ; do
#	#Foreground
#	for clfg in {30..37} {90..97} 39 ; do
#		#Formatting
#		for attr in 0 1 2 4 5 7 ; do
#			#Print the result
#			echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
#		done
#		echo #Newline
#	done
#done

r=$'\e[1;31m'
rr=$'\e[0;49;31m'
g=$'\e[1;32m'
y=$'\e[1;33m'
yy=$'\e[0;49;33m'
n=$'\e[0m'
gr=$'\e[1;40;30m'


function show_usage_search {
#see Bash Heredoc   
   cat<<EOF

${y}find / -iname "gcc"${n}
${y}find ${yy}/home /usr${n} ${r}-name "*.cpp"'${n} (им¤ об¤зательно в кавычках, чтобы bash не резвернул *)
${r}-maxdepth 10")${n} (рекурсивно не более 10 директорий в глубину)
${r}-type f${n} (regular file) или ${r}-type d${n} (directory)
${r}-user username${n}
${r}-perm mode")${n} или ${r}-perm 777${n} или ${r}-perm a=rw${n}
${r}-mmin +5 -mmin -30${n} (не позднее 5 минут назад) и (не ранее  30 минут назад)
${r}-ctime +5${n} (5 и больше дней назад)
${r}-mtimе -3${n} (в течение 3 дней)
${r}-size +500M -size -2G${n} (более 500ћб и менее 2√б)
${r}-size 20c${n} (менее 20 байт)

// чтобы исключить путь метод1
${r}-o -path "/proc/${rr}*${r}" -prune${n} (исключить путь. !!об¤зательно в конце пути * и -o) caviats: find prints the pruned directory.
// чтобы исключить путь метод2
${r}-not -path "/proc/*"${n} (caviats: doesn't search in /proc, still search in /proc/*/task ...)

${g}
find ~/fp7 ~/p133 -type f -name '*conf' -print -exec grep DEBUG_BUILD {} \;${r}
                                                          об¤зательно!---^^${n}
${g}find . -type f -print0  | xargs -0 -P \$(nproc) grep your_pattern${n}# multi-threaded search
${gr}-------------------------SEE ALSO --------------------------------------------${n}
\$ find ~/fp7 ~/p133 -type f -name '*conf' -print -exec grep DEBUG_BUILD {} \;${r}
                                                            об¤зательно!---^^${n}
\$ find . -type f -print0  | xargs -0 -P \$(nproc) grep your_pattern # multi-threaded search

\$ LC_CTYPE=ru_RU.CP866 grep -r --include=\*.{c,h,cpp,hpp,cc} "шаблонов докуменов" ./
\$ LC_CTYPE=ru_RU.CP866 grep -rIn --include=\*.{c,h,cpp,hpp,cc} "шаблонов докуменов" ./
${gr}	-I -- ignore binary, -n show filename and line number${n}


\$ whatis gcc
${gr}	gcc (1) - GNU project C and C++ compiler${n}

\$ whereis gcc
${gr}	gcc: /usr/bin/gcc  /usr/lib/gcc  /usr/share/gcc  /usr/share/man/man1/gcc.1.gz${n}

\$ which gcc
${gr}	/usr/bin/gcc${n}

\$ type -a gcc
${gr}	gcc is /usr/bin/gcc
	gcc is /bin/gcc${n}

\$ locate -b '\gcc'

\$ apt show gcc

\$ dpkg -L gcc
${gr}	/usr/bin/c99-gcc
	...
	/usr/share/doc/cpp-x86-64-linux-gnu
	...
	/usr/share/man/man1/c99-gcc.1.gz
	/usr/bin/gcc
	/usr/bin/gcc-ar
	/usr/bin/gcc-nm${n}

\$ apropos systemd | grep ctl
${gr}	deb-systemd-helper (1p) - subset of systemctl for machines not running systemd
	deb-systemd-invoke (1p) - wrapper around systemctl, respecting policy-rc.d
	journalctl (1)       - Print log entries from the systemd journal
	loginctl (1)         - Control the systemd login manager
	oomctl (1)           - Analyze the state stored in systemd-oomd
	systemctl (1)        - Control the systemd system and service manager
	systemd-initctl (8)  - /dev/initctl compatibility
	systemd-initctl.service (8) - /dev/initctl compatibility
	systemd-initctl.socket (8) - /dev/initctl compatibility
	systemd-sysctl (8)   - Configure kernel parameters at boot
	systemd-sysctl.service (8) - Configure kernel parameters at boot${n}
${gr}------------------------------------------------------------------------------${n}
EOF
}


function show_usage_grep {
cat<<EOF
  grep "cent[er][re]" file	# ${gr}center(Ame)/centre(Br)${n}
  grep -e regex1 -e regex2 filename
  grep "foo\|bar" filename
  grep -rIn --include=\*.{c,h,cpp,hpp,cc} "pattern" ./
  ${gr}    -I -- ignore binary, -n -- show filename and line number, -r -- recursively ${n}
  grep --context|before-context|after-context 3
  ${gr}    Print 3 lines of context around, before, or after each match${n}
  LC_CTYPE=ru_RU.CP866 grep -rIn --include=\*.{c,h,cpp,hpp,cc} "pattern" ./
EOF
}


function show_help {
	case "$1" in
        search) show_usage_search
            ;;
        find)   show_usage_search
            ;;
        tar) show_usage_tar
            ;;
        grep) show_usage_grep
            ;;
        *) echo -e "Use \"helpme WITH_WHAT\"\n\tsearch\n\tfind\n\ttar\tgrep..." 
            ;;
	esac
}

alias helpme=show_help
